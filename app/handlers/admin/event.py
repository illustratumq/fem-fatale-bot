from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from app.config import Config
from app.database.services.enums import EventTypeEnum, EventStatusEnum
from app.database.services.repos import EventRepo, UserRepo, ChatRepo
from app.filters import IsAdminFilter
from app.keyboards import Buttons
from app.keyboards.reply.menu import basic_kb, menu_kb
from app.states.states import AdminEventSG


async def event_processing_back(msg: Message, user_db: UserRepo, event_db: EventRepo,
                                config: Config, state: FSMContext):
    data = await state.get_data()
    event_id = data['event_id']
    event = await event_db.get_event(event_id)
    await event_db.update_event(event_id, admin_id=msg.from_user.id, status=EventStatusEnum.PROCESSED)
    admin = await user_db.get_user(msg.from_user.id)
    user = await user_db.get_user(event.user_id)
    url = config.misc.server_host_ip + ':8000' + f'/admin/femfatale/user/{user.user_id}/change/'
    text = event.create_for_admin_text(user) + f'\n\nüåç <a href="{url}">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å</a>'
    await event.make_message(msg.bot, config, event_db, user, admin)
    buttons = [
        [Buttons.admin.make_done],
        [Buttons.admin.create_message], [Buttons.admin.create_chat],
        [Buttons.admin.cancel]
    ]
    if event.type == EventTypeEnum.PAYOUT:
        buttons.insert(1, [Buttons.admin.create_payout])
    await msg.answer(text, reply_markup=basic_kb(buttons))
    await state.update_data(event_id=event_id, user_id=user.user_id)
    await AdminEventSG.Select.set()


async def cancel_processing(msg: Message, user_db: UserRepo, event_db: EventRepo, config: Config, state: FSMContext):
    data = await state.get_data()
    event_id = data['event_id']
    event = await event_db.get_event(event_id)
    await event_db.update_event(event_id, admin_id=msg.from_user.id, status=EventStatusEnum.ACTIVE)
    user = await user_db.get_user(event.user_id)
    await event.make_message(msg.bot, config, event_db, user, restore_keyboard=True)
    await msg.answer('–î—ñ—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–∞. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –Ω–µ—ó —â–µ —Ä–∞–∑', reply_markup=menu_kb(admin=True))
    await state.finish()


async def done_processing_confirm(msg: Message):
    await msg.answer('–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, —â–æ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞. –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è, '
                     '–≤–∏ –≤–∂–µ –Ω–µ –∑–º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è.',
                     reply_markup=basic_kb([[Buttons.admin.make_done], [Buttons.admin.back]]))
    await AdminEventSG.Confirm.set()


async def done_processing(msg: Message, user_db: UserRepo, event_db: EventRepo, config: Config, state: FSMContext):
    data = await state.get_data()
    event_id = data['event_id']
    event = await event_db.get_event(event_id)
    admin = await user_db.get_user(msg.from_user.id)
    await event_db.update_event(event_id, admin_id=msg.from_user.id, status=EventStatusEnum.DONE)
    user = await user_db.get_user(event.user_id)
    await event.make_message(msg.bot, config, event_db, user, admin)
    await msg.answer('–î—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üëå', reply_markup=menu_kb())
    await state.finish()


async def one_time_message_cmd(msg: Message, user_db: UserRepo, state: FSMContext):
    data = await state.get_data()
    user = await user_db.get_user(data['user_id'])
    text = (
        '–†–∞–∑–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–≤–∑–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, '
        '–∞ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É - –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Ç—É!\n\n'
        f'–ë—É–¥—å-–ª–∞—Å–∫–∞ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è {user.get_mentioned()}'
    )
    await msg.answer(text, reply_markup=basic_kb([Buttons.admin.back]))
    await AdminEventSG.OneTimeMessage.set()


async def save_one_time_message(msg: Message, state: FSMContext):
    await state.update_data(admin_answer=msg.html_text)
    text = (
        '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ, —è–∫—â–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ –≤–º—ñ—Å—Ç, '
        '–≤—ñ–¥–ø—Ä–∞–≤—Ç –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–∞–∑.\n\n'
        '–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ - –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
    )
    await msg.reply(text, reply_markup=basic_kb([[Buttons.admin.create_message], [Buttons.admin.back]]))
    await AdminEventSG.Confirm.set()


async def send_one_time_message(msg: Message, user_db: UserRepo, event_db: EventRepo,
                                config: Config, state: FSMContext):
    data = await state.get_data()
    event = await event_db.get_event(data['event_id'])
    action = {
        EventTypeEnum.PAYOUT: '–Ω–∞ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç –ø—Ä–æ –≤–∏–ø–ª–∞—Ç—É –∫–µ—à–±–µ–∫—É',
        EventTypeEnum.HELP: f'–Ω–∞ —Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è "{event.description[:15]}..."',
        EventTypeEnum.RESERV: f'–Ω–∞ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç –Ω–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑–∞–∫–ª–∞–¥—É\n\n{event.description}',
        EventTypeEnum.AUTH: f'–Ω–∞ —Ç–≤–æ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —É –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—ñ'
    }
    text = (
        f'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –§–µ–º–§–∞—Ç–∞–ª—å –≤—ñ–¥–ø–æ–≤—ñ–≤ {action[event.type]}:\n\n'
        f'–í—ñ–¥–ø–æ–≤—ñ–¥—å: <i>{data["admin_answer"]}</i>'
    )
    await msg.bot.send_message(data['user_id'], text=text)
    await msg.answer('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await event_processing_back(msg, user_db, event_db, config, state)


async def create_chat(msg: Message, user_db: UserRepo, chat_db: ChatRepo, event_db: EventRepo, state: FSMContext):
    data = await state.get_data()
    user = await user_db.get_user(data['user_id'])
    event = await event_db.get_event(data['event_id'])
    chat = await chat_db.add(user_id=data['user_id'], admin_id=msg.from_user.id, event_id=data['event_id'])
    await state.update_data(chat_id=chat.chat_id)
    action = {
        EventTypeEnum.AUTH: '–Ω–∞ –≤–∞—à –∑–∞–ø–∏—à —â–æ–¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó',
        EventTypeEnum.HELP: '–Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è',
        EventTypeEnum.PAYOUT: '–Ω–∞ –≤–∞—à –∑–∞–ø–∏—Ç –ø–æ –≤–∏–ø–ª–∞—Ç—ñ –∫–µ—à–±–µ–∫—É',
        EventTypeEnum.RESERV: '–Ω–∞ –≤–∞—à –∑–∞–ø–∏—Ç –ø–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—é –∑–∞–∫–ª–∞–¥—É'
    }
    to_admin_text = (
        'üí¨ –í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º—ñ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –≤—Å—ñ –≤–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—É—Ç—å —Ç—Ä–∞–Ω—Å–ª—é–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.\n\n'
        '–î–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.\n\n'
        f'#–ß–∞—Ç_–Ω–æ–º–µ—Ä_{chat.chat_id}.'
    )
    to_user_text = (
        f'üí¨ –í—ñ—Ç–∞—é {user.first_name}, {action[event.type]} –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –§–µ–º–§–∞—Ç–∞–ª—å\n\n'
        f'–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥, –±—É–¥—å –ª–∞—Å–∫–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ'
    )
    await msg.answer(to_admin_text, reply_markup=basic_kb([Buttons.admin.cancel_chat]))
    await msg.bot.send_message(user.user_id, to_user_text, reply_markup=ReplyKeyboardRemove())


def setup(dp: Dispatcher):
    dp.register_message_handler(
        cancel_processing, IsAdminFilter(), text=Buttons.admin.cancel, state=AdminEventSG.Select)
    dp.register_message_handler(
        create_chat, IsAdminFilter(), text=Buttons.admin.create_chat, state=AdminEventSG.Select)
    dp.register_message_handler(
        one_time_message_cmd, IsAdminFilter(), text=Buttons.admin.create_message, state=AdminEventSG.Select)
    dp.register_message_handler(save_one_time_message, IsAdminFilter(), state=AdminEventSG.OneTimeMessage)
    dp.register_message_handler(event_processing_back, IsAdminFilter(), text=Buttons.admin.back, state='*')
    dp.register_message_handler(
        send_one_time_message, IsAdminFilter(), text=Buttons.admin.create_message, state=AdminEventSG.Confirm)
    dp.register_message_handler(
        done_processing_confirm, IsAdminFilter(), state=AdminEventSG.Select, text=Buttons.admin.make_done)
    dp.register_message_handler(
        done_processing, IsAdminFilter(), state=AdminEventSG.Confirm, text=Buttons.admin.make_done)
