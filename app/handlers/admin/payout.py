from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ContentTypes

from app.database.services.enums import PayoutTypeEnum, UserStatusEnum
from app.database.services.repos import UserRepo, PayoutRepo
from app.filters import IsAdminFilter
from app.keyboards import Buttons
from app.keyboards.reply.menu import basic_kb
from app.states.states import AdminPayoutSG


async def admin_create_payout_cmd(msg: Message, state: FSMContext, user_db: UserRepo):
    data = await state.get_data()
    user = await user_db.get_user(data['user_id'])
    text = (
        f'–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–ª–∞—Ç—ñ–∂ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∞–±–æ –∑–Ω—è—Ç—Ç—è –±–∞–ª—ñ–≤ –∑ —Ä–∞—Ö—É–Ω–∫—É.\n\n'
        f'–ù–∞ —Ä–∞—Ö—É–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.balance} –±–∞–ª—ñ–≤\n\n'
        f'–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂—É'
    )
    await msg.answer(text, reply_markup=basic_kb(
        [
            [Buttons.admin.plus], [Buttons.admin.minus],
            [Buttons.admin.back]
        ]
    ))
    await AdminPayoutSG.Payout.set()


async def save_payout_type(msg: Message, state: FSMContext):
    payout_type = 'minus' if msg.text == Buttons.admin.minus else 'plus'
    await state.update_data(payout_type=payout_type)
    action = {
        'minus': '–∑–Ω—è—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å—É',
        'plus': '–ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å'
    }
    await msg.answer(f'–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ –±–∞–ª—ñ–≤ –ø–æ—Ç—ñ–±–Ω–æ {action[payout_type]}', reply_markup=basic_kb([Buttons.admin.back]))
    await AdminPayoutSG.Value.set()


async def save_payout_value(msg: Message, state: FSMContext, user_db: UserRepo):
    data = await state.get_data()
    user = await user_db.get_user(data['user_id'])
    payout_value: str = msg.text
    if not payout_value.isnumeric():
        await msg.answer('–°—Ö–æ–∂–µ —Ü–µ –Ω–µ —á–∏—Å–ª–æ, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —â–µ —Ä–∞–∑')
    elif data['payout_type'] == 'minus' and user.balance - int(payout_value) <= 0:
        await msg.answer(f'–ù–∞ –±–∞–ª–∞–Ω—Å—ñ –∫–ª—ñ—î–Ω—Ç–∞ {user.balance} –±–∞–ª—ñ–≤. '
                         f'–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–Ω—è—Ç–∏ –±—ñ–ª—å—à–µ —Ü—ñ—î—ó —Å—É–º–∏, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —â–µ —Ä–∞–∑')
    else:
        await state.update_data(payout_value=int(payout_value), payout_photo=False, payout_comment=False)
        await msg.answer('–ß—É–¥–æ–≤–æ, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ, —è–∫–µ –æ—Ç—Ä–∏–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ',
                         reply_markup=basic_kb([[Buttons.admin.skip], [Buttons.admin.back]]))
        await AdminPayoutSG.Photo.set()


async def save_payout_photo(msg: Message, state: FSMContext, user_db: UserRepo):
    await msg.answer('–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –π–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ, —â–æ–± –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏')
    await state.update_data(payout_photo=msg.photo[-1].file_id)
    await confirm_payout_create(msg, state, user_db)


async def save_payout_comment(msg: Message, state: FSMContext, user_db: UserRepo):
    await msg.answer('–ö–æ–º–µ–Ω—Ç–∞—Ä –∑–∞–ø–∏—Å–∞–Ω–∏–π. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –π–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ, —â–æ–± –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏')
    await state.update_data(payout_comment=msg.html_text)
    await confirm_payout_create(msg, state, user_db)


async def confirm_payout_create(msg: Message, state: FSMContext, user_db: UserRepo):
    data = await state.get_data()
    payout_type = data['payout_type']
    payout_value = data['payout_value']
    payout_photo = data['payout_photo']
    payout_comment = data['payout_comment']
    user = await user_db.get_user(data['user_id'])
    text = (
        f'–ü–ª–∞—Ç—ñ–∂ –¥–ª—è {user.get_mentioned()}\n\n'
        f'–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É: {"–Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤" if payout_type == "plus" else "–∑–Ω—è—Ç—Ç—è –±–∞–ª—ñ–≤"}\n'
        f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: {payout_value}\n'
    )
    if payout_comment:
        text += f'–ö–æ–º–µ–Ω—Ç–∞—Ä: {payout_comment}'
    if payout_photo:
        await msg.answer_photo(payout_photo, caption=text)
    else:
        await msg.answer(text)
    await msg.answer('–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É. –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–∑ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä, '
                     '—è–∫–∏–π –ø–æ–±–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –∞–±–æ –Ω–µ —Ä–æ–±–∏—Ç–∏ —Ü—å–æ–≥–æ.',
                     reply_markup=basic_kb([[Buttons.admin.done_payout], [Buttons.admin.back]]))
    await AdminPayoutSG.Confirm.set()


async def create_payout(msg: Message, user_db: UserRepo, payout_db: PayoutRepo, state: FSMContext):
    data = await state.get_data()
    payout_type = data['payout_type']
    payout_value = data['payout_value']
    payout_photo = data['payout_photo']if data['payout_photo'] else None
    payout_comment = data['payout_comment'] if data['payout_comment'] else '–ü–µ—Ä–µ–∫–∞–∑–≤ –±–∞–ª—ñ–≤'
    user = await user_db.get_user(data['user_id'])
    admin = await user_db.get_user(msg.from_user.id)
    payout = await payout_db.add(
        photo_id=payout_photo, user_id=user.user_id, value=payout_value, user_answer=payout_comment,
        description=f'–ü–µ—Ä–µ–∫–∞–∑ –±–∞–ª—ñ–≤ {payout_type} {payout_value} by {admin.full_name}',
        type=PayoutTypeEnum.MINUS if payout_type == 'minus' else PayoutTypeEnum.PLUS
    )
    if payout_type == 'minus':
        await user_db.update_user(user.user_id, balance=user.balance - payout_value)
    else:
        await user_db.update_user(user.user_id, balance=user.balance + payout_value)
    action = {
        'minus': '–£ —Ç–µ–±–µ —Å–ø–∏—Å–∞–Ω–æ',
        'plus': '–¢–æ–±—ñ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ'
    }
    text = (
        f'üîî {action[payout_type]} {payout_value} –±–∞–ª—ñ–≤.'
    )
    if payout_comment:
        text += f'\n\n–ö–æ–º–µ–Ω—Ç–∞—Ä: {payout_comment}'
    try:
        if payout_photo:
            await msg.bot.send_photo(user.user_id, payout_photo, caption=text)
        else:
            await msg.bot.send_message(user.user_id, text)
    except:
        if user.status == UserStatusEnum.ACTIVE:
            await user_db.update_user(user.user_id, status=UserStatusEnum.INACTIVE)
            await msg.answer('–°—Ö–æ–∂–µ –∫–ª—ñ—î–Ω—Ç –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞, —ñ –Ω–µ –æ—Ç—Ä–∏–º–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è')
    await msg.answer('–ü–ª–∞—Ç—ñ–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', reply_markup=basic_kb([Buttons.admin.to_admin]))


def setup(dp: Dispatcher):
    dp.register_message_handler(
        admin_create_payout_cmd, IsAdminFilter(), text=Buttons.admin.create_payout_panel, state='select_action')
    dp.register_message_handler(save_payout_type, IsAdminFilter(), state=AdminPayoutSG.Payout)
    dp.register_message_handler(save_payout_value, IsAdminFilter(), state=AdminPayoutSG.Value)
    dp.register_message_handler(
        save_payout_photo, IsAdminFilter(), state=[AdminPayoutSG.Photo, AdminPayoutSG.Confirm],
        content_types=ContentTypes.PHOTO
    )
    dp.register_message_handler(
        confirm_payout_create, IsAdminFilter(), state=AdminPayoutSG.Photo, text=Buttons.admin.skip)
    dp.register_message_handler(
        create_payout, IsAdminFilter(), state=AdminPayoutSG.Confirm, text=Buttons.admin.done_payout)
    dp.register_message_handler(save_payout_comment, IsAdminFilter(), state=AdminPayoutSG.Confirm)