from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import Message, ContentTypes

from app.config import Config
from app.database.services.enums import UserStatusEnum, EventTypeEnum
from app.database.services.repos import UserRepo, EventRepo
from app.keyboards.reply.menu import menu_kb, introduction_kb, share_phone_kb, Buttons
from app.states.states import AuthSG


async def start_cmd(msg: Message, user_db: UserRepo, state: FSMContext):
    user = await user_db.get_user(msg.from_user.id)
    if user is None:
        await introduction_cmd(msg)
    else:
        await msg.answer(f'–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –≤ –ì–ª–æ–≤–Ω–µ –º–µ–Ω—é üëã', reply_markup=menu_kb(user.is_authorized))
        await state.finish()


async def introduction_cmd(msg: Message):
    text = (
        f'–ü—Ä–∏–≤—ñ—Ç, {msg.from_user.first_name} üëã\n\n'
        f'–ú–∏ –¥—É–∂–µ —Ä–∞–¥—ñ –±–∞—á–∏—Ç–∏ —Ç–µ–±–µ –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ! –ù–∞—à–∞ –º–µ—Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è '
        f'–∑ —Ç–æ–±–æ—é –ø—Ä–æ—Å—Ç—ñ—à–∏–º —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—à–∏–º!üîù\n\n'
        '<b>–¢—É—Ç —Ç–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ—à:</b>\n\n'
        '‚Ä¢ –ú–∞—Ç–∏ –ø—Ä–∏ —Å–æ–±—ñ –Ω–æ–º–µ—Ä —Å–≤–æ—î—ó –∫–∞—Ä—Ç–∏ —Ç–∞ –±–∞—á–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Å–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å—É\n'
        '‚Ä¢ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é\n'
        '‚Ä¢ –ó–∞–º–æ–≤–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É –∑–∞–∫–ª–∞–¥–∞—Ö –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –∞–±–æ –≤–∏–ø–ª–∞—Ç—É –∫–µ—à–±–µ–∫—É\n'
        '‚Ä¢  –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—è –ø—Ä–æ –∫—Ä—É—Ç—ñ –∞–∫—Ü—ñ—ó—ó —Ç–∞ –Ω–æ–≤–∏–Ω–∏\n\n'
        '<b>–î–ª—è —Ç–æ–≥–æ —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏, —è–∫—ñ –∑–∞–≤–∂–∏ –±—É–¥—É—Ç—å –∑–Ω–∏—É –µ–∫—Ä–∞–Ω—É üëá</b>'
    )
    await msg.answer(text, reply_markup=introduction_kb())
    await AuthSG.Introduction.set()


async def authorization_cmd(msg: Message):
    text = (
        'üì≤ –ü–æ–¥—ñ–ª–∏—Å—å —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –º–∏ –∑–º–æ–≥–ª–∏ –≤–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–±–µ! –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!\n\n'
        '–¢–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—à –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ–π –∫—Ä–æ–∫, —ñ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –ø—ñ–∑–Ω—ñ—à–µ.'
    )
    await msg.answer(text, reply_markup=share_phone_kb())
    await AuthSG.Phone.set()


async def skip_authorization_cmd(msg: Message, user_db: UserRepo, event_db: EventRepo, config: Config,
                                 state: FSMContext):
    user = await user_db.get_user(msg.from_user.id)
    data = await state.get_data()
    phone = data['phone'] if 'phone' in data.keys() else None
    if not user or all([user, phone]):
        user = await user_db.add(user_id=msg.from_user.id, full_name=msg.from_user.full_name,
                                 phone=phone, status=UserStatusEnum.ACTIVE,
                                 info='–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç. –ö–∞—Ä—Ç–∞ –≤–∏–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ')
        await user_db.generate_user_card(msg.from_user.id)
        text = (
            f'<b>–ó–¥–∞—î—Ç—å—Å—è, –¢–∏ –Ω–∞—à –Ω–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç! üéâ</b>\n\n'
            f'–ê–±–æ —Ä–∞–Ω—ñ—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞(-–≤–∞–≤) —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó '
            f'–≤ –º–æ–±—ñ–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É Femme Fatale.\n\n'
        )
        if phone:
            text += f'–ú–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏ —Ç–æ–±—ñ –∫–∞—Ä—Ç—É –∫–ª—ñ—î–Ω—Ç–∞ {user.card}'
        else:
            event = await event_db.add(
                user_id=msg.from_user.id, description='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–≤—Å—è. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–¥–∞—Ç–∏ –∫–∞—Ä—Ç—É –∫–ª—ñ—î–Ω—Ç–∞',
                type=EventTypeEnum.AUTH
            )
            await event.make_message()

        await msg.answer(text, reply_markup=menu_kb())
        await state.finish()
    else:
        await start_cmd(msg, user_db, state)


async def search_user_cmd(msg: Message, user_db: UserRepo, state: FSMContext, event_db: EventRepo, config: Config):
    phone = msg.contact.phone_number.replace('+', '').replace(' ', '')
    user_by_phone = await user_db.get_user_phone(phone)
    if not user_by_phone:
        await state.update_data(phone=phone)
        await skip_authorization_cmd(msg, user_db, event_db, config, state)
    else:
        await msg.answer(f'–£—Ä–∞, –º–∏ –∑–º–æ–≥–ª–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–±–µ, {user_by_phone.first_name.capitalize()}! üéâ')
        #  –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ —Ü—å–æ–º—É —é–∑–µ—Ä –∞–π–¥—ñ, —è —è–∫—â–æ –≤—ñ–Ω —î –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ

        user_by_id = await user_db.get_user(msg.from_user.id)
        if user_by_id:
            await user_db.delete_user(user_by_id.user_id)

        #  –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–º –∞–¥–π—ñ —Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–º
        new_user_data = user_by_phone.as_dict()
        new_user_data.update(
            user_id=msg.from_user.id, status=UserStatusEnum.ACTIVE
        )
        await user_db.add(**new_user_data, info='–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç')

        #  –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ —é–∑–µ—Ä–∞ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
        await user_db.delete_user(user_by_phone.user_id)
        await start_cmd(msg, user_db, state)
        await state.finish()


def setup(dp: Dispatcher):
    dp.register_message_handler(start_cmd, CommandStart(), state='*')
    dp.register_message_handler(start_cmd, text=Buttons.menu.back, state='*')
    dp.register_message_handler(authorization_cmd, text=Buttons.menu.auth)
    dp.register_message_handler(authorization_cmd, state=AuthSG.Introduction, text=Buttons.menu.introduction)
    dp.register_message_handler(search_user_cmd, state=AuthSG.Phone, content_types=ContentTypes.CONTACT)
    dp.register_message_handler(skip_authorization_cmd, state=AuthSG.Phone, text=Buttons.menu.skip)