from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from app.database.services.enums import EventTypeEnum
from app.database.services.repos import UserRepo, ChatRepo
from app.keyboards import Buttons
from app.keyboards.reply.menu import basic_kb, menu_kb
from app.states.states import PayoutSG


async def payout_cmd(msg: Message, user_db: UserRepo, chat_db: ChatRepo):
    chat = await chat_db.get_chat_user(msg.from_user.id)
    user = await user_db.get_user(msg.from_user.id)
    await chat.create_action_message(msg.bot, Buttons.menu.cashback)
    if not user.is_authorized:
        text = (
            'üì≤ –î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–µ—à–±–µ–∫, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é!\n\n'
            '–ë–∞–∂–∞—î—à –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–∞—Ä–∞–∑? –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ'
        )
        await msg.answer(text, reply_markup=basic_kb([[Buttons.menu.auth], [Buttons.menu.back]]))
    else:
        await user_card_cmd(msg, user_db)


async def user_card_cmd(msg: Message, user_db: UserRepo):
    user = await user_db.get_user(msg.from_user.id)
    text = (
        '–ë—É–¥—å-–ª–∞—Å–∫–∞ –≤–∫–∞–∂–∏ —Å–≤–æ—é –∞–∫—Ç—É–∞–ª—å–Ω—É –±–∞–Ω–∫—ñ–≤—Å—å–∫—É –∫–∞—Ä—Ç—É, –Ω–∞ —è–∫—É –±–∞–∂–∞—î—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–ª–∞—Ç—É'
    )
    buttons = [[user.bankcard], [Buttons.menu.back]] if user.bankcard else [Buttons.menu.back]
    await msg.answer(text, reply_markup=basic_kb(buttons))
    await PayoutSG.Card.set()


async def save_card_cmd(msg: Message, user_db: UserRepo):
    bankcard: str = msg.text.replace(' ', '')
    user = await user_db.get_user(msg.from_user.id)
    if not bankcard.isalnum() or len(bankcard) != 16:
        await msg.answer('–£–ø—Å, —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑')
    else:
        if bankcard != user.bankcard:
            await user_db.update_user(msg.from_user.id, bankcard=bankcard)
            await msg.answer('–Ø –∑–±–µ—Ä—ñ–≥ —Ç–≤–æ—é –Ω–æ–≤—É –∫–∞—Ä—Ç—É')
        await user_comment_enter(msg)


async def user_comment_enter(msg: Message):
    await msg.answer('–ù–∞–ø–∏—à–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤, —è–∫–∏–π —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∫–µ—à–±–∫—É, –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —Ü–µ–π –∫—Ä–æ–∫',
                     reply_markup=basic_kb([[Buttons.menu.skipping], [Buttons.menu.back]]))
    await PayoutSG.Comment.set()


async def save_comment(msg: Message, state: FSMContext, chat_db: ChatRepo):
    await state.update_data(comment=msg.text)
    await save_and_send_event(msg, chat_db, state)


async def save_and_send_event(msg: Message, chat_db: ChatRepo, state: FSMContext):
    data = await state.get_data()
    description = data['comment'] if 'comment' in data.keys() else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–ª–∏—à–∏–≤ –∫–æ–º–µ—Ç–∞—Ä'
    chat = await chat_db.get_chat_user(msg.from_user.id)
    await chat.create_event_message(msg.bot, EventTypeEnum.PAYOUT, description)
    await msg.answer('–¢–≤—ñ–π –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –û—á—ñ–∫—É–π –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó!', reply_markup=menu_kb())
    await state.finish()


def setup(dp: Dispatcher):
    dp.register_message_handler(payout_cmd, text=Buttons.menu.cashback, state='*')
    dp.register_message_handler(save_and_send_event, state=PayoutSG.Comment, text=Buttons.menu.skipping)
    dp.register_message_handler(save_card_cmd, state=PayoutSG.Card)
    dp.register_message_handler(save_comment, state=PayoutSG.Comment)
