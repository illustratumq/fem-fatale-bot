from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from app.config import Config
from app.database.services.enums import EventTypeEnum
from app.database.services.repos import UserRepo, PartnerRepo, ChatRepo
from app.keyboards.reply.menu import basic_kb, Buttons, menu_kb


async def reserv_cmd(msg: Message, user_db: UserRepo, partner_db: PartnerRepo, chat_db: ChatRepo, state: FSMContext):
    user = await user_db.get_user(msg.from_user.id)
    chat = await chat_db.get_chat_user(msg.from_user.id)
    await chat.create_action_message(msg.bot, Buttons.menu.reserv)
    if not user.is_authorized:
        text = (
            'üì≤ –î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–µ—à–±–µ–∫, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é!\n\n'
            '–ë–∞–∂–∞—î—à –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–∞—Ä–∞–∑? –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ'
        )
        await msg.answer(text, reply_markup=basic_kb([[Buttons.menu.auth], [Buttons.menu.back]]))
    else:
        text = (
            '–î–ª—è —Ç–æ–≥–æ —â–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∑–∞–∫–ª–∞–¥, –±—É–¥—å-–ª–∞—Å–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ –≤–∫–∞–∂–∏:\n'
            '- –ù–∞–∑–≤—É –∑–∞–∫–ª–∞–¥—É\n'
        )
        data = await state.get_data()
        if 'partner_id' in data.keys():
            partner = await partner_db.get_partner(data['partner_id'])
            text = (
                f'–î–ª—è —Ç–æ–≥–æ —â–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∑–∞–∫–ª–∞–¥ {partner.name}, –±—É–¥—å-–ª–∞—Å–∫–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ –≤–∫–∞–∂–∏:\n'
            )
        text += (
            '- –î–∞—Ç—É —Ç–∞ —á–∞—Å\n'
            '- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Å—Ç–µ–π\n'
            '- –Ü–º\'—è –Ω–∞ —è–∫–µ –±—É–¥–µ –±—Ä–æ–Ω—é–≤–∞—Ç–∏—Å—å –∑–∞–∫–ª–∞–¥\n\n'
            '–ù–∞ –¥–æ–¥–∞—Ç–æ–∫, —Ç–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä.'
        )
        await msg.answer(text, reply_markup=basic_kb([Buttons.menu.back]))
        await state.set_state(state='reserv')


async def save_user_comment(msg: Message, user_db: UserRepo, state: FSMContext,
                            config: Config, partner_db: PartnerRepo, chat_db: ChatRepo):
    data = await state.get_data()
    description = msg.text
    if 'partner_id' in data.keys():
        partner = await partner_db.get_partner(data['partner_id'])
        description = f'–ó–∞–∫–ª–∞–¥ {partner.name}. {description}'
    chat = await chat_db.get_chat_user(msg.from_user.id)
    await chat.create_event_message(msg.bot, EventTypeEnum.RESERV, description)
    await msg.answer('–¢–≤—ñ–π –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –û—á—ñ–∫—É–π –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó!', reply_markup=menu_kb())
    await state.finish()


def setup(dp: Dispatcher):
    dp.register_message_handler(reserv_cmd, text=Buttons.menu.reserv, state='*')
    dp.register_message_handler(save_user_comment, state='reserv')