from datetime import datetime

from django.contrib.postgres.fields import ArrayField
from django.db import models

# Create your models here.
from django.forms import Textarea, ModelForm

from app.config import Config
from telebot import TeleBot

from app.keyboards import Buttons


class TimeBaseModel(models.Model):

    class Meta:
        abstract = True

    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è')


class Media(TimeBaseModel):

    class Meta:
        db_table = 'medias'
        verbose_name = '–º–µ–¥—ñ–∞'
        verbose_name_plural = '–º–µ–¥—ñ–∞'

    ContentTypeEnum = (
        ('VIDEO', '–í—ñ–¥–µ–æ'),
        ('PHOTO', '–§–æ—Ç–æ')
    )

    id = models.BigAutoField(primary_key=True)
    name = models.CharField(max_length=20, null=True, blank=True, verbose_name='–ù–∞–∑–≤–∞ –º–µ–¥—ñ–∞ –¥–∞–Ω–∏—Ö')
    files = ArrayField(ArrayField(models.CharField(blank=True)), verbose_name='–¢–µ–ª–µ–≥—Ä–∞–º ID —Ñ–∞–π–ª—ñ–≤', editable=False)
    content_type = models.CharField(choices=ContentTypeEnum, verbose_name='–¢–∏–ø —Ñ–∞–π–ª—ñ–≤', editable=False)

    def __str__(self):
        return self.name


class Article(TimeBaseModel):

    class Meta:
        db_table = 'articles'
        verbose_name = '–Ω–æ–≤–∏–Ω–∞'
        verbose_name_plural = '–Ω–æ–≤–∏–Ω–∏'

    ArticleStatusEnum = (
        ('ACTIVE', '–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞'),
        ('HIDE', '–ü—Ä–∏—Ö–æ–≤–∞–Ω–∞')
    )

    id = models.BigAutoField(primary_key=True)
    media = models.ForeignKey(Media, on_delete=models.CASCADE, verbose_name='–ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏', null=True, blank=True)
    title = models.CharField(max_length=200, null=True, blank=True, verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫')
    description = models.CharField(max_length=1060, null=False, verbose_name='–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç', blank=True)
    status = models.CharField(choices=ArticleStatusEnum, default='HIDE', null=False, verbose_name='–°—Ç–∞—Ç—É—Å')

    def __str__(self):
        return f'–ù–æ–≤–∏–Ω–∞ ‚Ññ{self.id}'


class Partner(TimeBaseModel):

    class Meta:
        db_table = 'partners'
        verbose_name = '–ø–∞—Ä—Ç–Ω–µ—Ä'
        verbose_name_plural = '–ø–∞—Ä—Ç–Ω–µ—Ä–∏'

    PARTNER_CATEGORIES = (
        ('–†–µ—Å—Ç–æ—Ä–∞–Ω–∏', '–†–µ—Å—Ç–æ—Ä–∞–Ω–∏'),
        ('–ú–∞—Å–∞–∂–Ω—ñ —Å–∞–ª–æ–Ω–∏', '–ú–∞—Å–∞–∂–Ω—ñ —Å–∞–ª–æ–Ω–∏'),
        ('Spa', 'Spa'),
        ('–ú–∞–≥–∞–∑–∏–Ω–∏', '–ú–∞–≥–∞–∑–∏–Ω–∏'),
        ('–ö–∞–∑–∏–Ω–æ', '–ö–∞–∑–∏–Ω–æ'),
        ('–ö–∞—Ä–∞–æ–∫–µ', '–ö–∞—Ä–∞–æ–∫–µ'),
        ('–ì–æ—Ç–µ–ª—ñ', '–ì–æ—Ç–µ–ª—ñ'),
        ('–°–∞–ª–æ–Ω–∏ –∫—Ä–∞—Å–∏', '–°–∞–ª–æ–Ω–∏ –∫—Ä–∞—Å–∏'),
        ('–Ü–Ω—à–µ', '–Ü–Ω—à–µ')
    )

    id = models.BigAutoField(primary_key=True)
    media = models.ForeignKey(Media, on_delete=models.CASCADE, verbose_name='–ú–µ–¥—ñ–∞ –ø–∞–∫—É–Ω–æ–∫', null=True, blank=True)
    name = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞ –∑–∞–∫–ª–∞–¥—É', null=False)
    category = models.CharField(max_length=20, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', null=False)
    address = models.CharField(max_length=500, verbose_name='–ê–¥—Ä–µ—Å–∞', null=False)
    cashback = models.CharField(max_length=50, verbose_name='–ö–µ—à–±–µ–∫', null=True)
    phone = models.CharField(max_length=12, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω', null=True, blank=True)
    city = models.CharField(max_length=20, verbose_name='–ú—ñ—Å—Ç–æ', null=False, default='–ö–∏—ó–≤')
    description = models.CharField(max_length=1000, verbose_name='–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', null=True, blank=True)
    priority = models.IntegerField(null=True, blank=True, verbose_name='–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ñ—Å—Ç—å')

    def __str__(self):
        return f'{self.name} ({self.category}'


class User(TimeBaseModel):

    class Meta:
        db_table = 'users'
        verbose_name = '–∫–ª—ñ—î–Ω—Ç'
        verbose_name_plural = '–∫–ª—ñ—î–Ω—Ç–∏'

    UserStatusEnum = (
        ('ACTIVE', '–ê–∫—Ç–∏–≤–Ω–∏–π'),
        ('INACTIVE', '–ù–µ –∞–∫—Ç–∏–≤–Ω–∏–π'),
        ('UNAUTHORIZED', '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π')
    )

    UserRoleEnum = (
        ('ADMIN', '–ê–¥–º—ñ–Ω'),
        ('USER', '–ö–ª—ñ—î–Ω—Ç'),
        ('MODERATOR', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'),
        ('COMPETITION', '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç'),
        ('PARTNER', '–ü–∞—Ä—Ç–Ω–µ—Ä')
    )

    user_id = models.BigIntegerField(primary_key=True, verbose_name='–¢–µ–ª–µ–≥—Ä–∞–º ID')
    full_name = models.CharField(max_length=255, null=False, verbose_name='–Ü–º\'—è')
    status = models.CharField(choices=UserStatusEnum, null=False, default='UNAUTHORIZED', verbose_name='–°—Ç–∞—Ç—É—Å')
    role = models.CharField(choices=UserRoleEnum, null=False, default='USER', verbose_name='–†–æ–ª—å')
    phone = models.CharField(max_length=12, null=True, blank=True, verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω')
    card = models.CharField(max_length=10, null=True, blank=True, verbose_name='–ö–∞—Ä—Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞', unique=True)
    bankcard = models.CharField(max_length=16, null=True, blank=True, verbose_name='–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∞')
    balance = models.BigIntegerField(default=0, verbose_name='–ë–∞–ª–∞–Ω—Å, –≥—Ä–Ω', help_text='*–†–∞—Ö—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ')
    info = models.CharField(max_length=1000, null=True, blank=True, verbose_name='–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤')

    def __str__(self):
        return f'{self.full_name} ({self.card})'


class Payout(TimeBaseModel):

    class Meta:
        db_table = 'payouts'
        verbose_name = '–ø–ª–∞—Ç—ñ–∂'
        verbose_name_plural = '–ø–ª–∞—Ç–µ–∂—ñ'

    PayoutTypeEnum = (
        ('MINUS', '–°–ø–∏—Å–∞–Ω–Ω—è'),
        ('PLUS', '–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è')
    )

    PayoutTagEnum = (
        ('default', '–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å'),
        ('edited', '–°—Ç–≤–æ—Ä–µ–Ω–∏–π –∞–¥–º—ñ–Ω–æ–º –ø–ª–∞—Ç—ñ–∂')
    )

    id = models.BigAutoField(primary_key=True)
    payout_date = models.DateTimeField(verbose_name='–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–µ–∫—É', default=datetime.now())
    media = models.ForeignKey(Media,  on_delete=models.SET_NULL, verbose_name='–§–æ—Ç–æ —á–µ–∫—É', null=True, blank=True)
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ö–ª—ñ—î–Ω—Ç', null=False)
    partner = models.ForeignKey(Partner, on_delete=models.SET_NULL, verbose_name='–ó–∞–∫–ª–∞–¥', null=True, blank=True)

    # PRICE
    price = models.IntegerField(verbose_name='–ß–∏—Å—Ç–∞ —Å—É–º–∞ —á–µ–∫—É, –≥—Ä–Ω', help_text='–û–±–æ–≤\'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ')
    general_price = models.IntegerField(verbose_name='–ó–∞–≥–∞–ª—å–Ω–∏–π –∫–µ—à–±–µ–∫, –≥—Ä–Ω', null=True, blank=True,
                                        help_text='*–†–∞—Ö—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è')
    service_price = models.IntegerField(verbose_name='–ù–∞—à –∫–µ—à–±–µ–∫, –≥—Ä–Ω', null=True, blank=True,
                                        help_text='*–†–∞—Ö—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è')
    user_price = models.IntegerField(verbose_name='–ö–µ—à–±–µ–∫ –∫–ª—ñ—î–Ω—Ç–∞, –≥—Ä–Ω', null=True, blank=True,
                                     help_text='*–†–∞—Ö—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è')

    # PERCENT
    general_percent = models.IntegerField(verbose_name='–ó–∞–≥–∞–ª—å–Ω–∏–π –∫–µ—à–±–µ–∫',
                                          help_text='–ó–∞–≥–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –∫–µ—à–±–µ–∫—É, —è–∫–∏–π –Ω–∞–º –ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–ª–∞–¥. '
                                                    '–û–±–æ–≤\'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ')
    service_percent = models.IntegerField(verbose_name='–ù–∞—à –ø—Ä–∏–±—É—Ç–æ–∫',
                                          help_text='–í—ñ–¥—Å–æ—Ç–æ–∫ –∫–µ—à–±–µ–∫—É, —è–∫–∏–π –º–∏ –∑–∞–ª–∏—à–∞—î–º–æ —Å–æ–±—ñ. –û–±–æ–≤\'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ')
    user_percent = models.IntegerField(verbose_name='–ö–µ—à–±–∫–µ–∫ –∫–ª—ñ—î–Ω—Ç–∞',
                                       help_text='–í—ñ–¥—Å–æ—Ç–æ–∫ –∫–µ—à–±–µ–∫—É, —è–∫–∏–π –æ—Ç—Ä–∏–º–∞—î –∫–ª—ñ—î–Ω—Ç. –û–±–æ–≤\'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ')

    # OTHER//
    comment = models.CharField(max_length=1000, null=True, blank=True, verbose_name='–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞',
                               help_text='–¶–µ–π –∫–æ–º–µ–Ω—Ç–∞—Ä –ø–æ–±–∞—á–∏—Ç—å –∫–ª—ñ—î–Ω—Ç')
    description = models.CharField(max_length=1000, null=True, blank=True, verbose_name='–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤')
    type = models.CharField(choices=PayoutTypeEnum, default='MINUS', null=False, verbose_name='–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó')
    tag = models.CharField(choices=PayoutTagEnum, verbose_name='–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É', default='edited')

    def __str__(self):
        return f'{"-" if self.type == "MINUS" else "+"} {self.price} –≥—Ä–Ω. –¥–ª—è ' \
               f'{self.user.full_name}'

    def save(self, *args, **kwargs):
        self.general_price = round(self.general_percent / 100 * self.price)
        self.service_price = round(self.service_percent / 100 * self.price)
        user_price = round(self.user_percent / 100 * self.price)
        self.user_price = user_price
        if not Payout.objects.filter(id=self.id):
            config = Config.from_env()
            bot = TeleBot(config.bot.token)
            action = '–¢–æ–±—ñ –±—É–ª–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ' if self.type == 'PLUS' else '–ó —Ç–µ–±–µ –±—É–ª–æ —Å–ø–∏—Å–∞–Ω–æ'
            text = (
                f'üîî {action} {self.user_price} –±–∞–ª—ñ–≤.\n\n'
                f'–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —Ä–æ–∑–¥—ñ–ª <b>{Buttons.menu.balance}</b>, '
                f'—â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é'
            )
            try:
                bot.send_message(self.user.user_id, text, parse_mode='HTML')
            except:
                pass
        save = super(Payout, self).save(*args, **kwargs)
        balance = 0
        for payout in Payout.objects.filter(user_id=self.user.user_id):
            if payout.type == 'MINUS':
                balance -= payout.user_price
            else:
                balance += payout.user_price
        self.user.balance = balance
        super(User, self.user).save()
        return save

    def delete(self, *args, **kwargs):
        config = Config.from_env()
        bot = TeleBot(config.bot.token)
        text = (
            f'üîî –í–∞—à –ø–ª–∞—Ç—ñ–∂ {"+" if self.type == "PLUS" else "-"} {self.user_price} –≥—Ä–Ω. –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. '
            f'–î–ª—è —É—Ç–æ—á–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º, –≤ —Ä–æ–∑–¥—ñ–ª—ñ <b>{Buttons.menu.help}</b>'
        )
        try:
            bot.send_message(self.user.user_id, text, parse_mode='HTML')
        except:
            pass
        delete = super(Payout, self).delete(*args, **kwargs)
        balance = 0
        for payout in Payout.objects.filter(user_id=self.user.user_id):
            if payout.type == 'MINUS':
                balance -= payout.user_price
            else:
                balance += payout.user_price
        self.user.balance = balance
        super(User, self.user).save()
        return delete


class BaseForm(ModelForm):
    class Meta:
        fields = '__all__'

        widgets = {
            'info': Textarea(attrs={'cols': 100, 'rows': 5}),
            'description': Textarea(attrs={'cols': 100, 'rows': 5}),
            'files': Textarea(attrs={'cols': 100, 'rows': 5}),
            'address': Textarea(attrs={'cols': 100, 'rows': 3})
        }

